



-- CREATE table of books
CREATE TABLE BOOKS(
	BOOKS_ID INT PRIMARY 	KEY 	NOT NULL,
	TITLE  			TEXT,
	IMG_SRC 		TEXT,
	DESCRIPTION 	TEXT,
	LINK 			TEXT,
	LIKES  			INT,
	DISLIKES 		INT	
);




-- /////////////////////////////////////////////

-- CREATE COMPANY
CREATE TABLE COMPANY(
	ID INT PRIMARY 	KEY 	NOT NULL,
	NAME  			TEXT 	NOT NULL,
	AGE 			INT 	NOT NULL,
	ADDRESS 		CHAR(50),
	SALARY 			REAL	
);

INSERT INTO COMPANY(ID, NAME, AGE, ADDRESS, SALARY)
VALUES(1, 'NUNO', 24, 'MARS', 999999);

INSERT INTO COMPANY(ID, NAME, AGE, ADDRESS, SALARY)
VALUES(2, 'MARCO', 24, 'CALIFORNIA', 100);

SELECT * FROM COMPANY;

.header on
.mode column

CREATE TABLE ARTIST(
	ARTIST_ID 	INT PRIMARY KEY 	NOT NULL,
	NAME  		TEXT 				NOT NULL
);

CREATE TABLE TRACK(
	TRACK_ID 	INT PRIMARY KEY 	NOT NULL,
	TRACK_NAME 	TEXT 				NOT NULL,
	ARTIST_ID 	INT 				NOT NULL,
	FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID)
);


INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(1, 'GARAGEM DA VIZINHA', 1);

INSERT INTO ARTIST(ARTIST_ID, NAME)
VALUES(1, 'Quim Barreiros');

INSERT INTO ARTIST(ARTIST_ID, NAME)
VALUES(2, 'Xutos e pontapes');

INSERT INTO ARTIST(ARTIST_ID, NAME)
VALUES(3, 'Adele');

SELECT * FROM COMPANY;

SELECT NAME FROM ARTIST WHERE NAME like '%Quim%';

SELECT NAME FROM ARTIST WHERE NAME like '%Quim%' OR ARTIST_ID = 2;

drop TABLE ARTIST
-- ou alter table artist
-- add blabla
CREATE TABLE ARTIST(
	ARTIST_ID 	INT PRIMARY KEY 	NOT NULL,
	NAME 		TEXT 				NOT NULL,
	CACHE 		REAL,
	TYPE 		TEXT
);

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(1, 'Quim Barreiros', 800, 'Pimba');

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(2, 'Xutos e pontapes', 1000, 'Rock');

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(3, 'Adele', 50000, 'Emo');

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(4, 'Marco Paulo', 999, 'Pimba');

SELECT TYPE
from artist
group by TYPe
order by type desc
limit 2 offset 1;

select name, count(*) from artist WHERE type = 'Pimba';

SELECT type, count(name) from artist group by type; 

select sum(cache) from artist;


INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(1, 'GARAGEM DA VIZINHA', 1);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(2, 'Cabritinha', 1);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(3, 'hello', 3);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(4, 'ma', 4);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(5, 'mt ma', 4);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(6, 'pessima', 4);


select * from artist 
left join TRACK 
on artist.ARTIST_ID = TRACK.ARTIST_ID 
order by TRACK_ID;


INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(7, 'terrivel', 6);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(8, 'melhor', 5);

INSERT INTO TRACK(TRACK_ID, TRACK_NAME, ARTIST_ID)
VALUES(9, 'va ja se aceita', 5);

select * from TRACK 
left join ARTIST
on artist.ARTIST_ID = TRACK.ARTIST_ID 
order by TRACK_ID;


CREATE TABLE CONCERT(
	CONCERT_ID INT PRIMARY KEY 	NOT NULL,
	FOREIGN KEY(CONCERT_ID) REFERENCES CONCERT_ARTIST(CONCERT_ID)
);


CREATE TABLE CONCERT_ARTIST(
	CONCERT_ID 	INT 	NOT NULL,
	ARTIST_ID 	INT 	NOT NULL,
	FOREIGN KEY(CONCERT_ID) REFERENCES CONCERT(CONCERT_ID),
	FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID)
);

drop table ARTIST;
CREATE TABLE ARTIST(
	ARTIST_ID 	INT PRIMARY KEY 	NOT NULL,
	NAME 		TEXT 				NOT NULL,
	CACHE 		REAL,
	TYPE 		TEXT,
	FOREIGN KEY(ARTIST_ID) REFERENCES CONCERT_ARTIST(ARTIST_ID)
);

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(1, 'Quim Barreiros', 800, 'Pimba');

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(2, 'Xutos e pontapes', 1000, 'Rock');

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(3, 'Adele', 50000, 'Emo');

INSERT INTO ARTIST(ARTIST_ID, NAME, CACHE, TYPE)
VALUES(4, 'Marco Paulo', 999, 'Pimba');



INSERT INTO CONCERT(CONCERT_ID)
VALUES(1);

INSERT INTO CONCERT_ARTIST(CONCERT_ID, ARTIST_ID)
VALUES(1, 3);

INSERT INTO CONCERT_ARTIST(CONCERT_ID, ARTIST_ID)
VALUES(1, 4);

INSERT INTO CONCERT_ARTIST(CONCERT_ID, ARTIST_ID)
VALUES(1, 1);


select ARTIST.NAME, CONCERT.CONCERT_ID
from ARTIST 
join CONCERT_ARTIST 
join CONCERT
on artist.ARTIST_ID = CONCERT_ARTIST.ARTIST_ID
and concert.CONCERT_ID = CONCERT_ARTIST.CONCERT_ID;







